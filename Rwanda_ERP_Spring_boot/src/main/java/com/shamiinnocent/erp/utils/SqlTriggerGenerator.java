//package com.shamiinnocent.erp.utils;
//
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.stereotype.Component;
//
//import java.io.FileWriter;
//import java.io.IOException;
//
///**
// * Utility for generating PostgreSQL trigger definitions for the ERP payroll system.
// * Creates a trigger.sql file with triggers for payroll notification generation.
// *
// * @author ERP System
// * @version 1.0
// * @since 1.0
// */
//@Component
//@Slf4j
//public class SqlTriggerGenerator {
//
//    private static final String OUTPUT_PATH1 = "src/main/resources/triggers.sql";
//    private static final String OUTPUT_PATH2 = "/app/triggers.sql";
//
//    /**
//     * Generates a trigger.sql file containing PostgreSQL triggers for payroll management.
//     * Includes a trigger to generate notifications when payrolls are approved.
//     *
//     * @throws RuntimeException if file writing fails
//     */
//    public void generateTriggerSql() {
//        String triggerSql = """
//        -- Trigger Definitions for ERP Payroll System
//        -- Version: 1.0
//        -- Database: PostgreSQL
//        -- Generated by: ERP System
//        -- Date: 2023-11-15
//
//        -- Trigger to generate messages when a payroll is approved
//        CREATE OR REPLACE FUNCTION create_payroll_notification()
//        RETURNS TRIGGER AS $$
//        DECLARE
//            employee_first_name VARCHAR;
//            institution_name VARCHAR := 'ERP System';
//            month_year VARCHAR;
//            amount NUMERIC(10, 2);
//            employee_code VARCHAR;
//            message_content TEXT;
//        BEGIN
//            -- Only proceed if status is changing to 'PAID'
//            IF NEW.status = 'PAID' AND (OLD.status IS NULL OR OLD.status <> 'PAID') THEN
//                -- Get employee details
//                SELECT e.first_name, e.code INTO employee_first_name, employee_code
//                FROM employees e
//                WHERE e.id = NEW.employee_id;
//
//                -- Format month/year
//                month_year := to_char(NEW.year_month, 'Month YYYY');
//
//                -- Format amount
//                amount := NEW.net_salary;
//
//                -- Create message content
//                message_content := 'Dear ' || employee_first_name || ', your Salary of ' || month_year ||
//                                  ' from ' || institution_name || ' (Amount: ' || amount || ') has been credited to your ' ||
//                                  employee_code || ' account successfully.';
//
//                -- Insert message
//                INSERT INTO messages (
//                    employee_id,
//                    content,
//                    year_month,
//                    created_at,
//                    status
//                ) VALUES (
//                    NEW.employee_id,
//                    message_content,
//                    NEW.year_month,
//                    NOW(),
//                    'PENDING'
//                );
//            END IF;
//
//            RETURN NEW;
//        END;
//        $$ LANGUAGE plpgsql;
//
//        -- Create the trigger on pay_slips table
//        DROP TRIGGER IF EXISTS payroll_notification_trigger ON pay_slips;
//        CREATE TRIGGER payroll_notification_trigger
//        AFTER UPDATE ON pay_slips
//        FOR EACH ROW
//        EXECUTE FUNCTION create_payroll_notification();
//        """;
//
//        try (FileWriter writer = new FileWriter(OUTPUT_PATH1)) {
//            writer.write(triggerSql);
//            log.info("Successfully generated {} with PostgreSQL triggers for payroll notification", OUTPUT_PATH1);
//        } catch (IOException e) {
//            log.error("Failed to generate {}: {}", OUTPUT_PATH2, e.getMessage(), e);
//            throw new RuntimeException("Error generating triggers.sql", e);
//        }
//    }
//}


package com.shamiinnocent.erp.utils;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value; // Import Value annotation
import org.springframework.stereotype.Component;

import java.io.File; // Import File class
import java.io.FileWriter;
import java.io.IOException;

/**
 * Utility for generating PostgreSQL trigger definitions for the ERP payroll system.
 * Creates a trigger.sql file with triggers for payroll notification generation.
 *
 * @author ERP System
 * @version 1.0
 * @since 1.0
 */
@Component
@Slf4j
public class SqlTriggerGenerator {

    // Inject the output path from application.properties or application.yml
    // Defaulting to a relative 'data' directory for flexibility.
    // Consider using an absolute path like /var/lib/your-app/triggers.sql
    // or a temporary directory if the file is truly transient.
    @Value("${app.trigger.output.path:./data/triggers.sql}")
    private String triggerOutputPath;

    /**
     * Generates a trigger.sql file containing PostgreSQL triggers for payroll management.
     * Includes a trigger to generate notifications when payrolls are approved.
     *
     * @throws RuntimeException if file writing fails
     */
    public void generateTriggerSql() {
        String triggerSql = """
        -- Trigger Definitions for ERP Payroll System
        -- Version: 1.0
        -- Database: PostgreSQL
        -- Generated by: ERP System
        -- Date: 2023-11-15

        -- Trigger to generate messages when a payroll is approved
        CREATE OR REPLACE FUNCTION create_payroll_notification()
        RETURNS TRIGGER AS $$
        DECLARE
            employee_first_name VARCHAR;
            institution_name VARCHAR := 'ERP System';
            month_year VARCHAR;
            amount NUMERIC(10, 2);
            employee_code VARCHAR;
            message_content TEXT;
        BEGIN
            -- Only proceed if status is changing to 'PAID'
            IF NEW.status = 'PAID' AND (OLD.status IS NULL OR OLD.status <> 'PAID') THEN
                -- Get employee details
                SELECT e.first_name, e.code INTO employee_first_name, employee_code
                FROM employees e
                WHERE e.id = NEW.employee_id;

                -- Format month/year
                month_year := to_char(NEW.year_month, 'Month DD, YYYY'); -- Corrected format for clarity

                -- Format amount
                amount := NEW.net_salary;

                -- Create message content
                message_content := 'Dear ' || employee_first_name || ', your Salary of ' || month_year ||
                                  ' from ' || institution_name || ' (Amount: ' || amount || ') has been credited to your ' ||
                                  employee_code || ' account successfully.';

                -- Insert message
                INSERT INTO messages (
                    employee_id,
                    content,
                    year_month,
                    created_at,
                    status
                ) VALUES (
                    NEW.employee_id,
                    message_content,
                    NEW.year_month,
                    NOW(),
                    'PENDING'
                );
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

        -- Create the trigger on pay_slips table
        DROP TRIGGER IF EXISTS payroll_notification_trigger ON pay_slips;
        CREATE TRIGGER payroll_notification_trigger
        AFTER UPDATE ON pay_slips
        FOR EACH ROW
        EXECUTE FUNCTION create_payroll_notification();
        """;

        File outputFile = new File(triggerOutputPath);
        File parentDir = outputFile.getParentFile();

        // Ensure the parent directory exists before attempting to write the file
        if (parentDir != null && !parentDir.exists()) {
            log.info("Creating directory: {}", parentDir.getAbsolutePath());
            if (!parentDir.mkdirs()) {
                log.error("Failed to create directory: {}", parentDir.getAbsolutePath());
                throw new RuntimeException("Could not create necessary directories for trigger SQL file.");
            }
        }

        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.write(triggerSql);
            log.info("Successfully generated {} with PostgreSQL triggers for payroll notification", triggerOutputPath);
        } catch (IOException e) {
            // Log the actual path that failed for better debugging
            log.error("Failed to generate {}: {}", triggerOutputPath, e.getMessage(), e);
            throw new RuntimeException("Error generating triggers.sql", e);
        }
    }
}
